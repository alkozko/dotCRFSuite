/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGCSHARP
#define SWIGCSHARP
#endif

#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_crfsuite(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_crfsuite(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_crfsuite(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that C# proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif
#include <string>
#include <exception>

namespace Swig {
  /* Director base class - not currently used in C# directors */
  class Director {
  };

  /* Base class for director exceptions */
  class DirectorException : public std::exception {
  protected:
    std::string swig_msg;

  public:
    DirectorException(const char *msg) : swig_msg(msg) {
    }

    DirectorException(const std::string &msg) : swig_msg(msg) {
    }

    virtual ~DirectorException() throw() {
    }

    const char *what() const throw() {
      return swig_msg.c_str();
    }
  };

  /* Pure virtual method exception */
  class DirectorPureVirtualException : public DirectorException {
  public:
    DirectorPureVirtualException(const char *msg) : DirectorException(std::string("Attempt to invoke pure virtual method ") + msg) {
    }
  };
}


#include "crfsuite_api.hpp"


#include <string>


#include <typeinfo>
#include <stdexcept>


#include <vector>
#include <algorithm>
#include <stdexcept>


SWIGINTERN void SWIG_CSharpException(int code, const char *msg) {
  if (code == SWIG_ValueError) {
    SWIG_CSharpExceptionArgumentCodes exception_code = SWIG_CSharpArgumentOutOfRangeException;
    SWIG_CSharpSetPendingExceptionArgument(exception_code, msg, 0);
  } else {
    SWIG_CSharpExceptionCodes exception_code = SWIG_CSharpApplicationException;
    switch(code) {
    case SWIG_MemoryError:
      exception_code = SWIG_CSharpOutOfMemoryException;
      break;
    case SWIG_IndexError:
      exception_code = SWIG_CSharpIndexOutOfRangeException;
      break;
    case SWIG_DivisionByZero:
      exception_code = SWIG_CSharpDivideByZeroException;
      break;
    case SWIG_IOError:
      exception_code = SWIG_CSharpIOException;
      break;
    case SWIG_OverflowError:
      exception_code = SWIG_CSharpOverflowException;
      break;
    case SWIG_RuntimeError:
    case SWIG_TypeError:
    case SWIG_SyntaxError:
    case SWIG_SystemError:
    case SWIG_UnknownError:
    default:
      exception_code = SWIG_CSharpApplicationException;
      break;
    }
    SWIG_CSharpSetPendingException(exception_code, msg);
  }
}


#include <typeinfo>
#include <stdexcept>

SWIGINTERN std::vector< CRFSuite::Attribute > *new_std_vector_Sl_CRFSuite_Attribute_Sg___SWIG_2(int capacity){
        std::vector< CRFSuite::Attribute >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< CRFSuite::Attribute >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN CRFSuite::Attribute std_vector_Sl_CRFSuite_Attribute_Sg__getitemcopy(std::vector< CRFSuite::Attribute > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN CRFSuite::Attribute const &std_vector_Sl_CRFSuite_Attribute_Sg__getitem(std::vector< CRFSuite::Attribute > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_CRFSuite_Attribute_Sg__setitem(std::vector< CRFSuite::Attribute > *self,int index,CRFSuite::Attribute const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_CRFSuite_Attribute_Sg__AddRange(std::vector< CRFSuite::Attribute > *self,std::vector< CRFSuite::Attribute > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< CRFSuite::Attribute > *std_vector_Sl_CRFSuite_Attribute_Sg__GetRange(std::vector< CRFSuite::Attribute > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< CRFSuite::Attribute >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_CRFSuite_Attribute_Sg__Insert(std::vector< CRFSuite::Attribute > *self,int index,CRFSuite::Attribute const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_CRFSuite_Attribute_Sg__InsertRange(std::vector< CRFSuite::Attribute > *self,int index,std::vector< CRFSuite::Attribute > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_CRFSuite_Attribute_Sg__RemoveAt(std::vector< CRFSuite::Attribute > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_CRFSuite_Attribute_Sg__RemoveRange(std::vector< CRFSuite::Attribute > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< CRFSuite::Attribute > *std_vector_Sl_CRFSuite_Attribute_Sg__Repeat(CRFSuite::Attribute const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< CRFSuite::Attribute >(count, value);
      }
SWIGINTERN void std_vector_Sl_CRFSuite_Attribute_Sg__Reverse__SWIG_0(std::vector< CRFSuite::Attribute > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_CRFSuite_Attribute_Sg__Reverse__SWIG_1(std::vector< CRFSuite::Attribute > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_CRFSuite_Attribute_Sg__SetRange(std::vector< CRFSuite::Attribute > *self,int index,std::vector< CRFSuite::Attribute > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< CRFSuite::Item > *new_std_vector_Sl_CRFSuite_Item_Sg___SWIG_2(int capacity){
        std::vector< std::vector< CRFSuite::Attribute > >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< std::vector< CRFSuite::Attribute > >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN std::vector< CRFSuite::Attribute > std_vector_Sl_CRFSuite_Item_Sg__getitemcopy(std::vector< CRFSuite::Item > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< CRFSuite::Attribute > const &std_vector_Sl_CRFSuite_Item_Sg__getitem(std::vector< CRFSuite::Item > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_CRFSuite_Item_Sg__setitem(std::vector< CRFSuite::Item > *self,int index,std::vector< CRFSuite::Attribute > const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_CRFSuite_Item_Sg__AddRange(std::vector< CRFSuite::Item > *self,std::vector< std::vector< CRFSuite::Attribute > > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< std::vector< CRFSuite::Attribute > > *std_vector_Sl_CRFSuite_Item_Sg__GetRange(std::vector< CRFSuite::Item > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< std::vector< CRFSuite::Attribute > >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_CRFSuite_Item_Sg__Insert(std::vector< CRFSuite::Item > *self,int index,std::vector< CRFSuite::Attribute > const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_CRFSuite_Item_Sg__InsertRange(std::vector< CRFSuite::Item > *self,int index,std::vector< std::vector< CRFSuite::Attribute > > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_CRFSuite_Item_Sg__RemoveAt(std::vector< CRFSuite::Item > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_CRFSuite_Item_Sg__RemoveRange(std::vector< CRFSuite::Item > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< std::vector< CRFSuite::Attribute > > *std_vector_Sl_CRFSuite_Item_Sg__Repeat(std::vector< CRFSuite::Attribute > const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< std::vector< CRFSuite::Attribute > >(count, value);
      }
SWIGINTERN void std_vector_Sl_CRFSuite_Item_Sg__Reverse__SWIG_0(std::vector< CRFSuite::Item > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_CRFSuite_Item_Sg__Reverse__SWIG_1(std::vector< CRFSuite::Item > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_CRFSuite_Item_Sg__SetRange(std::vector< CRFSuite::Item > *self,int index,std::vector< std::vector< CRFSuite::Attribute > > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< std::string > *new_std_vector_Sl_std_string_Sg___SWIG_2(int capacity){
        std::vector< std::string >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< std::string >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN std::string std_vector_Sl_std_string_Sg__getitemcopy(std::vector< std::string > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::string const &std_vector_Sl_std_string_Sg__getitem(std::vector< std::string > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__setitem(std::vector< std::string > *self,int index,std::string const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__AddRange(std::vector< std::string > *self,std::vector< std::string > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< std::string > *std_vector_Sl_std_string_Sg__GetRange(std::vector< std::string > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< std::string >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__Insert(std::vector< std::string > *self,int index,std::string const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__InsertRange(std::vector< std::string > *self,int index,std::vector< std::string > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__RemoveAt(std::vector< std::string > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__RemoveRange(std::vector< std::string > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< std::string > *std_vector_Sl_std_string_Sg__Repeat(std::string const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< std::string >(count, value);
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__Reverse__SWIG_0(std::vector< std::string > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__Reverse__SWIG_1(std::vector< std::string > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__SetRange(std::vector< std::string > *self,int index,std::vector< std::string > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_std_string_Sg__Contains(std::vector< std::string > *self,std::string const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_std_string_Sg__IndexOf(std::vector< std::string > *self,std::string const &value){
        int index = -1;
        std::vector< std::string >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_std_string_Sg__LastIndexOf(std::vector< std::string > *self,std::string const &value){
        int index = -1;
        std::vector< std::string >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_std_string_Sg__Remove(std::vector< std::string > *self,std::string const &value){
        std::vector< std::string >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
	  return true;
        }
        return false;
      }


/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "export_wrap.h"

SwigDirector_Trainer::SwigDirector_Trainer() : CRFSuite::Trainer(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_Trainer::~SwigDirector_Trainer() {
  
}


void SwigDirector_Trainer::message(std::string const &msg) {
  char * jmsg = 0 ;
  
  if (!swig_callbackmessage) {
    CRFSuite::Trainer::message(msg);
    return;
  } else {
    jmsg = SWIG_csharp_string_callback((&msg)->c_str()); 
    swig_callbackmessage(jmsg);
  }
}

void SwigDirector_Trainer::swig_connect_director(SWIG_Callback0_t callbackmessage) {
  swig_callbackmessage = callbackmessage;
}

void SwigDirector_Trainer::swig_init_callbacks() {
  swig_callbackmessage = 0;
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void SWIGSTDCALL CSharp_Attribute_attr_set(void * jarg1, char * jarg2) {
  CRFSuite::Attribute *arg1 = (CRFSuite::Attribute *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (CRFSuite::Attribute *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->attr = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Attribute_attr_get(void * jarg1) {
  char * jresult ;
  CRFSuite::Attribute *arg1 = (CRFSuite::Attribute *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (CRFSuite::Attribute *)jarg1; 
  result = (std::string *) & ((arg1)->attr);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Attribute_value_set(void * jarg1, double jarg2) {
  CRFSuite::Attribute *arg1 = (CRFSuite::Attribute *) 0 ;
  double arg2 ;
  
  arg1 = (CRFSuite::Attribute *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->value = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Attribute_value_get(void * jarg1) {
  double jresult ;
  CRFSuite::Attribute *arg1 = (CRFSuite::Attribute *) 0 ;
  double result;
  
  arg1 = (CRFSuite::Attribute *)jarg1; 
  result = (double) ((arg1)->value);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Attribute__SWIG_0() {
  void * jresult ;
  CRFSuite::Attribute *result = 0 ;
  
  {
    try {
      result = (CRFSuite::Attribute *)new CRFSuite::Attribute();
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Attribute__SWIG_1(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  CRFSuite::Attribute *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (CRFSuite::Attribute *)new CRFSuite::Attribute((std::string const &)*arg1);
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Attribute__SWIG_2(char * jarg1, double jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  double arg2 ;
  CRFSuite::Attribute *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (double)jarg2; 
  {
    try {
      result = (CRFSuite::Attribute *)new CRFSuite::Attribute((std::string const &)*arg1,arg2);
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Attribute(void * jarg1) {
  CRFSuite::Attribute *arg1 = (CRFSuite::Attribute *) 0 ;
  
  arg1 = (CRFSuite::Attribute *)jarg1; 
  {
    try {
      delete arg1;
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return ; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Trainer() {
  void * jresult ;
  CRFSuite::Trainer *result = 0 ;
  
  {
    try {
      result = (CRFSuite::Trainer *)new SwigDirector_Trainer();
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Trainer(void * jarg1) {
  CRFSuite::Trainer *arg1 = (CRFSuite::Trainer *) 0 ;
  
  arg1 = (CRFSuite::Trainer *)jarg1; 
  {
    try {
      delete arg1;
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return ; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Trainer_clear(void * jarg1) {
  CRFSuite::Trainer *arg1 = (CRFSuite::Trainer *) 0 ;
  
  arg1 = (CRFSuite::Trainer *)jarg1; 
  {
    try {
      (arg1)->clear();
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return ; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Trainer_append(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  CRFSuite::Trainer *arg1 = (CRFSuite::Trainer *) 0 ;
  CRFSuite::ItemSequence *arg2 = 0 ;
  CRFSuite::StringList *arg3 = 0 ;
  int arg4 ;
  
  arg1 = (CRFSuite::Trainer *)jarg1; 
  arg2 = (CRFSuite::ItemSequence *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CRFSuite::ItemSequence const & type is null", 0);
    return ;
  } 
  arg3 = (CRFSuite::StringList *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CRFSuite::StringList const & type is null", 0);
    return ;
  } 
  arg4 = (int)jarg4; 
  {
    try {
      (arg1)->append((CRFSuite::ItemSequence const &)*arg2,(CRFSuite::StringList const &)*arg3,arg4);
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return ; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Trainer_select(void * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  CRFSuite::Trainer *arg1 = (CRFSuite::Trainer *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool result;
  
  arg1 = (CRFSuite::Trainer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  {
    try {
      result = (bool)(arg1)->select((std::string const &)*arg2,(std::string const &)*arg3);
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Trainer_train(void * jarg1, char * jarg2, int jarg3) {
  int jresult ;
  CRFSuite::Trainer *arg1 = (CRFSuite::Trainer *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int result;
  
  arg1 = (CRFSuite::Trainer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  {
    try {
      result = (int)(arg1)->train((std::string const &)*arg2,arg3);
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Trainer_params_(void * jarg1) {
  void * jresult ;
  CRFSuite::Trainer *arg1 = (CRFSuite::Trainer *) 0 ;
  CRFSuite::StringList result;
  
  arg1 = (CRFSuite::Trainer *)jarg1; 
  {
    try {
      result = (arg1)->params();
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = new CRFSuite::StringList((const CRFSuite::StringList &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Trainer_set(void * jarg1, char * jarg2, char * jarg3) {
  CRFSuite::Trainer *arg1 = (CRFSuite::Trainer *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = (CRFSuite::Trainer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  {
    try {
      (arg1)->set((std::string const &)*arg2,(std::string const &)*arg3);
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return ; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Trainer_get(void * jarg1, char * jarg2) {
  char * jresult ;
  CRFSuite::Trainer *arg1 = (CRFSuite::Trainer *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  arg1 = (CRFSuite::Trainer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (arg1)->get((std::string const &)*arg2);
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Trainer_help(void * jarg1, char * jarg2) {
  char * jresult ;
  CRFSuite::Trainer *arg1 = (CRFSuite::Trainer *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  arg1 = (CRFSuite::Trainer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (arg1)->help((std::string const &)*arg2);
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Trainer_message(void * jarg1, char * jarg2) {
  CRFSuite::Trainer *arg1 = (CRFSuite::Trainer *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (CRFSuite::Trainer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (arg1)->message((std::string const &)*arg2);
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return ; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Trainer_messageSwigExplicitTrainer(void * jarg1, char * jarg2) {
  CRFSuite::Trainer *arg1 = (CRFSuite::Trainer *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (CRFSuite::Trainer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (arg1)->CRFSuite::Trainer::message((std::string const &)*arg2);
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return ; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Trainer_director_connect(void *objarg, SwigDirector_Trainer::SWIG_Callback0_t callback0) {
  CRFSuite::Trainer *obj = (CRFSuite::Trainer *)objarg;
  SwigDirector_Trainer *director = dynamic_cast<SwigDirector_Trainer *>(obj);
  if (director) {
    director->swig_connect_director(callback0);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Tagger() {
  void * jresult ;
  CRFSuite::Tagger *result = 0 ;
  
  {
    try {
      result = (CRFSuite::Tagger *)new CRFSuite::Tagger();
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Tagger(void * jarg1) {
  CRFSuite::Tagger *arg1 = (CRFSuite::Tagger *) 0 ;
  
  arg1 = (CRFSuite::Tagger *)jarg1; 
  {
    try {
      delete arg1;
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return ; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Tagger_open__SWIG_0(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  CRFSuite::Tagger *arg1 = (CRFSuite::Tagger *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (CRFSuite::Tagger *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (bool)(arg1)->open((std::string const &)*arg2);
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Tagger_open__SWIG_1(void * jarg1, void * jarg2, unsigned long jarg3) {
  unsigned int jresult ;
  CRFSuite::Tagger *arg1 = (CRFSuite::Tagger *) 0 ;
  void *arg2 = (void *) 0 ;
  std::size_t arg3 ;
  bool result;
  
  arg1 = (CRFSuite::Tagger *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (std::size_t)jarg3; 
  {
    try {
      result = (bool)(arg1)->open((void const *)arg2,arg3);
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Tagger_close(void * jarg1) {
  CRFSuite::Tagger *arg1 = (CRFSuite::Tagger *) 0 ;
  
  arg1 = (CRFSuite::Tagger *)jarg1; 
  {
    try {
      (arg1)->close();
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return ; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Tagger_labels(void * jarg1) {
  void * jresult ;
  CRFSuite::Tagger *arg1 = (CRFSuite::Tagger *) 0 ;
  CRFSuite::StringList result;
  
  arg1 = (CRFSuite::Tagger *)jarg1; 
  {
    try {
      result = (arg1)->labels();
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = new CRFSuite::StringList((const CRFSuite::StringList &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Tagger_tag(void * jarg1, void * jarg2) {
  void * jresult ;
  CRFSuite::Tagger *arg1 = (CRFSuite::Tagger *) 0 ;
  CRFSuite::ItemSequence *arg2 = 0 ;
  CRFSuite::StringList result;
  
  arg1 = (CRFSuite::Tagger *)jarg1; 
  arg2 = (CRFSuite::ItemSequence *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CRFSuite::ItemSequence const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (arg1)->tag((CRFSuite::ItemSequence const &)*arg2);
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = new CRFSuite::StringList((const CRFSuite::StringList &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Tagger_set(void * jarg1, void * jarg2) {
  CRFSuite::Tagger *arg1 = (CRFSuite::Tagger *) 0 ;
  CRFSuite::ItemSequence *arg2 = 0 ;
  
  arg1 = (CRFSuite::Tagger *)jarg1; 
  arg2 = (CRFSuite::ItemSequence *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CRFSuite::ItemSequence const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->set((CRFSuite::ItemSequence const &)*arg2);
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return ; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Tagger_viterbi(void * jarg1) {
  void * jresult ;
  CRFSuite::Tagger *arg1 = (CRFSuite::Tagger *) 0 ;
  CRFSuite::StringList result;
  
  arg1 = (CRFSuite::Tagger *)jarg1; 
  {
    try {
      result = (arg1)->viterbi();
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = new CRFSuite::StringList((const CRFSuite::StringList &)result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Tagger_probability(void * jarg1, void * jarg2) {
  double jresult ;
  CRFSuite::Tagger *arg1 = (CRFSuite::Tagger *) 0 ;
  CRFSuite::StringList *arg2 = 0 ;
  double result;
  
  arg1 = (CRFSuite::Tagger *)jarg1; 
  arg2 = (CRFSuite::StringList *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CRFSuite::StringList const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->probability((CRFSuite::StringList const &)*arg2);
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Tagger_marginal(void * jarg1, char * jarg2, int jarg3) {
  double jresult ;
  CRFSuite::Tagger *arg1 = (CRFSuite::Tagger *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  double result;
  
  arg1 = (CRFSuite::Tagger *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  {
    try {
      result = (double)(arg1)->marginal((std::string const &)*arg2,arg3);
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_version() {
  char * jresult ;
  std::string result;
  
  {
    try {
      result = CRFSuite::version();
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Item_Clear(void * jarg1) {
  std::vector< CRFSuite::Attribute > *arg1 = (std::vector< CRFSuite::Attribute > *) 0 ;
  
  arg1 = (std::vector< CRFSuite::Attribute > *)jarg1; 
  {
    try {
      (arg1)->clear();
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return ; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Item_Add(void * jarg1, void * jarg2) {
  std::vector< CRFSuite::Attribute > *arg1 = (std::vector< CRFSuite::Attribute > *) 0 ;
  CRFSuite::Attribute *arg2 = 0 ;
  
  arg1 = (std::vector< CRFSuite::Attribute > *)jarg1; 
  arg2 = (CRFSuite::Attribute *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CRFSuite::Attribute const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->push_back((CRFSuite::Attribute const &)*arg2);
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return ; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Item_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< CRFSuite::Attribute > *arg1 = (std::vector< CRFSuite::Attribute > *) 0 ;
  std::vector< CRFSuite::Attribute >::size_type result;
  
  arg1 = (std::vector< CRFSuite::Attribute > *)jarg1; 
  {
    try {
      result = ((std::vector< CRFSuite::Attribute > const *)arg1)->size();
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Item_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< CRFSuite::Attribute > *arg1 = (std::vector< CRFSuite::Attribute > *) 0 ;
  std::vector< CRFSuite::Attribute >::size_type result;
  
  arg1 = (std::vector< CRFSuite::Attribute > *)jarg1; 
  {
    try {
      result = ((std::vector< CRFSuite::Attribute > const *)arg1)->capacity();
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Item_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< CRFSuite::Attribute > *arg1 = (std::vector< CRFSuite::Attribute > *) 0 ;
  std::vector< CRFSuite::Attribute >::size_type arg2 ;
  
  arg1 = (std::vector< CRFSuite::Attribute > *)jarg1; 
  arg2 = (std::vector< CRFSuite::Attribute >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return ; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Item__SWIG_0() {
  void * jresult ;
  std::vector< CRFSuite::Attribute > *result = 0 ;
  
  {
    try {
      result = (std::vector< CRFSuite::Attribute > *)new std::vector< CRFSuite::Attribute >();
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Item__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< CRFSuite::Attribute > *arg1 = 0 ;
  std::vector< CRFSuite::Attribute > *result = 0 ;
  
  arg1 = (std::vector< CRFSuite::Attribute > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< CRFSuite::Attribute > const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (std::vector< CRFSuite::Attribute > *)new std::vector< CRFSuite::Attribute >((std::vector< CRFSuite::Attribute > const &)*arg1);
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Item__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< CRFSuite::Attribute > *result = 0 ;
  
  arg1 = (int)jarg1; 
  {
    try {
      try {
        result = (std::vector< CRFSuite::Attribute > *)new_std_vector_Sl_CRFSuite_Attribute_Sg___SWIG_2(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Item_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< CRFSuite::Attribute > *arg1 = (std::vector< CRFSuite::Attribute > *) 0 ;
  int arg2 ;
  CRFSuite::Attribute result;
  
  arg1 = (std::vector< CRFSuite::Attribute > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = std_vector_Sl_CRFSuite_Attribute_Sg__getitemcopy(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = new CRFSuite::Attribute((const CRFSuite::Attribute &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Item_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< CRFSuite::Attribute > *arg1 = (std::vector< CRFSuite::Attribute > *) 0 ;
  int arg2 ;
  CRFSuite::Attribute *result = 0 ;
  
  arg1 = (std::vector< CRFSuite::Attribute > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (CRFSuite::Attribute *) &std_vector_Sl_CRFSuite_Attribute_Sg__getitem(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Item_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< CRFSuite::Attribute > *arg1 = (std::vector< CRFSuite::Attribute > *) 0 ;
  int arg2 ;
  CRFSuite::Attribute *arg3 = 0 ;
  
  arg1 = (std::vector< CRFSuite::Attribute > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (CRFSuite::Attribute *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CRFSuite::Attribute const & type is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_CRFSuite_Attribute_Sg__setitem(arg1,arg2,(CRFSuite::Attribute const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return ; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Item_AddRange(void * jarg1, void * jarg2) {
  std::vector< CRFSuite::Attribute > *arg1 = (std::vector< CRFSuite::Attribute > *) 0 ;
  std::vector< CRFSuite::Attribute > *arg2 = 0 ;
  
  arg1 = (std::vector< CRFSuite::Attribute > *)jarg1; 
  arg2 = (std::vector< CRFSuite::Attribute > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< CRFSuite::Attribute > const & type is null", 0);
    return ;
  } 
  {
    try {
      std_vector_Sl_CRFSuite_Attribute_Sg__AddRange(arg1,(std::vector< CRFSuite::Attribute > const &)*arg2);
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return ; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Item_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< CRFSuite::Attribute > *arg1 = (std::vector< CRFSuite::Attribute > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< CRFSuite::Attribute > *result = 0 ;
  
  arg1 = (std::vector< CRFSuite::Attribute > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        result = (std::vector< CRFSuite::Attribute > *)std_vector_Sl_CRFSuite_Attribute_Sg__GetRange(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return 0;
      }
      
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Item_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< CRFSuite::Attribute > *arg1 = (std::vector< CRFSuite::Attribute > *) 0 ;
  int arg2 ;
  CRFSuite::Attribute *arg3 = 0 ;
  
  arg1 = (std::vector< CRFSuite::Attribute > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (CRFSuite::Attribute *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CRFSuite::Attribute const & type is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_CRFSuite_Attribute_Sg__Insert(arg1,arg2,(CRFSuite::Attribute const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return ; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Item_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< CRFSuite::Attribute > *arg1 = (std::vector< CRFSuite::Attribute > *) 0 ;
  int arg2 ;
  std::vector< CRFSuite::Attribute > *arg3 = 0 ;
  
  arg1 = (std::vector< CRFSuite::Attribute > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< CRFSuite::Attribute > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< CRFSuite::Attribute > const & type is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_CRFSuite_Attribute_Sg__InsertRange(arg1,arg2,(std::vector< CRFSuite::Attribute > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return ; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Item_RemoveAt(void * jarg1, int jarg2) {
  std::vector< CRFSuite::Attribute > *arg1 = (std::vector< CRFSuite::Attribute > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< CRFSuite::Attribute > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        std_vector_Sl_CRFSuite_Attribute_Sg__RemoveAt(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return ; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Item_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< CRFSuite::Attribute > *arg1 = (std::vector< CRFSuite::Attribute > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< CRFSuite::Attribute > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        std_vector_Sl_CRFSuite_Attribute_Sg__RemoveRange(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
      
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return ; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Item_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  CRFSuite::Attribute *arg1 = 0 ;
  int arg2 ;
  std::vector< CRFSuite::Attribute > *result = 0 ;
  
  arg1 = (CRFSuite::Attribute *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CRFSuite::Attribute const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< CRFSuite::Attribute > *)std_vector_Sl_CRFSuite_Attribute_Sg__Repeat((CRFSuite::Attribute const &)*arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Item_Reverse__SWIG_0(void * jarg1) {
  std::vector< CRFSuite::Attribute > *arg1 = (std::vector< CRFSuite::Attribute > *) 0 ;
  
  arg1 = (std::vector< CRFSuite::Attribute > *)jarg1; 
  {
    try {
      std_vector_Sl_CRFSuite_Attribute_Sg__Reverse__SWIG_0(arg1);
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return ; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Item_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< CRFSuite::Attribute > *arg1 = (std::vector< CRFSuite::Attribute > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< CRFSuite::Attribute > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        std_vector_Sl_CRFSuite_Attribute_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
      
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return ; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Item_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< CRFSuite::Attribute > *arg1 = (std::vector< CRFSuite::Attribute > *) 0 ;
  int arg2 ;
  std::vector< CRFSuite::Attribute > *arg3 = 0 ;
  
  arg1 = (std::vector< CRFSuite::Attribute > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< CRFSuite::Attribute > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< CRFSuite::Attribute > const & type is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_CRFSuite_Attribute_Sg__SetRange(arg1,arg2,(std::vector< CRFSuite::Attribute > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return ; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Item(void * jarg1) {
  std::vector< CRFSuite::Attribute > *arg1 = (std::vector< CRFSuite::Attribute > *) 0 ;
  
  arg1 = (std::vector< CRFSuite::Attribute > *)jarg1; 
  {
    try {
      delete arg1;
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return ; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemSequence_Clear(void * jarg1) {
  std::vector< CRFSuite::Item > *arg1 = (std::vector< CRFSuite::Item > *) 0 ;
  
  arg1 = (std::vector< CRFSuite::Item > *)jarg1; 
  {
    try {
      (arg1)->clear();
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return ; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemSequence_Add(void * jarg1, void * jarg2) {
  std::vector< CRFSuite::Item > *arg1 = (std::vector< CRFSuite::Item > *) 0 ;
  std::vector< CRFSuite::Attribute > *arg2 = 0 ;
  
  arg1 = (std::vector< CRFSuite::Item > *)jarg1; 
  arg2 = (std::vector< CRFSuite::Attribute > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< CRFSuite::Attribute > const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::vector< CRFSuite::Attribute > const &)*arg2);
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return ; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ItemSequence_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< CRFSuite::Item > *arg1 = (std::vector< CRFSuite::Item > *) 0 ;
  std::vector< std::vector< CRFSuite::Attribute > >::size_type result;
  
  arg1 = (std::vector< CRFSuite::Item > *)jarg1; 
  {
    try {
      result = ((std::vector< CRFSuite::Item > const *)arg1)->size();
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ItemSequence_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< CRFSuite::Item > *arg1 = (std::vector< CRFSuite::Item > *) 0 ;
  std::vector< std::vector< CRFSuite::Attribute > >::size_type result;
  
  arg1 = (std::vector< CRFSuite::Item > *)jarg1; 
  {
    try {
      result = ((std::vector< CRFSuite::Item > const *)arg1)->capacity();
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemSequence_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< CRFSuite::Item > *arg1 = (std::vector< CRFSuite::Item > *) 0 ;
  std::vector< std::vector< CRFSuite::Attribute > >::size_type arg2 ;
  
  arg1 = (std::vector< CRFSuite::Item > *)jarg1; 
  arg2 = (std::vector< std::vector< CRFSuite::Attribute > >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return ; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ItemSequence__SWIG_0() {
  void * jresult ;
  std::vector< CRFSuite::Item > *result = 0 ;
  
  {
    try {
      result = (std::vector< CRFSuite::Item > *)new std::vector< CRFSuite::Item >();
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ItemSequence__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< CRFSuite::Item > *arg1 = 0 ;
  std::vector< CRFSuite::Item > *result = 0 ;
  
  arg1 = (std::vector< CRFSuite::Item > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< CRFSuite::Item > const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (std::vector< CRFSuite::Item > *)new std::vector< CRFSuite::Item >((std::vector< CRFSuite::Item > const &)*arg1);
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ItemSequence__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< CRFSuite::Item > *result = 0 ;
  
  arg1 = (int)jarg1; 
  {
    try {
      try {
        result = (std::vector< CRFSuite::Item > *)new_std_vector_Sl_CRFSuite_Item_Sg___SWIG_2(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemSequence_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< CRFSuite::Item > *arg1 = (std::vector< CRFSuite::Item > *) 0 ;
  int arg2 ;
  std::vector< CRFSuite::Attribute > result;
  
  arg1 = (std::vector< CRFSuite::Item > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = std_vector_Sl_CRFSuite_Item_Sg__getitemcopy(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = new std::vector< CRFSuite::Attribute >((const std::vector< CRFSuite::Attribute > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemSequence_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< CRFSuite::Item > *arg1 = (std::vector< CRFSuite::Item > *) 0 ;
  int arg2 ;
  std::vector< CRFSuite::Attribute > *result = 0 ;
  
  arg1 = (std::vector< CRFSuite::Item > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< CRFSuite::Attribute > *) &std_vector_Sl_CRFSuite_Item_Sg__getitem(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemSequence_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< CRFSuite::Item > *arg1 = (std::vector< CRFSuite::Item > *) 0 ;
  int arg2 ;
  std::vector< CRFSuite::Attribute > *arg3 = 0 ;
  
  arg1 = (std::vector< CRFSuite::Item > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< CRFSuite::Attribute > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< CRFSuite::Attribute > const & type is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_CRFSuite_Item_Sg__setitem(arg1,arg2,(std::vector< CRFSuite::Attribute > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return ; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemSequence_AddRange(void * jarg1, void * jarg2) {
  std::vector< CRFSuite::Item > *arg1 = (std::vector< CRFSuite::Item > *) 0 ;
  std::vector< std::vector< CRFSuite::Attribute > > *arg2 = 0 ;
  
  arg1 = (std::vector< CRFSuite::Item > *)jarg1; 
  arg2 = (std::vector< std::vector< CRFSuite::Attribute > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::vector< CRFSuite::Attribute > > const & type is null", 0);
    return ;
  } 
  {
    try {
      std_vector_Sl_CRFSuite_Item_Sg__AddRange(arg1,(std::vector< std::vector< CRFSuite::Attribute > > const &)*arg2);
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return ; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemSequence_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< CRFSuite::Item > *arg1 = (std::vector< CRFSuite::Item > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< std::vector< CRFSuite::Attribute > > *result = 0 ;
  
  arg1 = (std::vector< CRFSuite::Item > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        result = (std::vector< std::vector< CRFSuite::Attribute > > *)std_vector_Sl_CRFSuite_Item_Sg__GetRange(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return 0;
      }
      
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemSequence_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< CRFSuite::Item > *arg1 = (std::vector< CRFSuite::Item > *) 0 ;
  int arg2 ;
  std::vector< CRFSuite::Attribute > *arg3 = 0 ;
  
  arg1 = (std::vector< CRFSuite::Item > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< CRFSuite::Attribute > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< CRFSuite::Attribute > const & type is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_CRFSuite_Item_Sg__Insert(arg1,arg2,(std::vector< CRFSuite::Attribute > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return ; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemSequence_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< CRFSuite::Item > *arg1 = (std::vector< CRFSuite::Item > *) 0 ;
  int arg2 ;
  std::vector< std::vector< CRFSuite::Attribute > > *arg3 = 0 ;
  
  arg1 = (std::vector< CRFSuite::Item > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::vector< CRFSuite::Attribute > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::vector< CRFSuite::Attribute > > const & type is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_CRFSuite_Item_Sg__InsertRange(arg1,arg2,(std::vector< std::vector< CRFSuite::Attribute > > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return ; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemSequence_RemoveAt(void * jarg1, int jarg2) {
  std::vector< CRFSuite::Item > *arg1 = (std::vector< CRFSuite::Item > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< CRFSuite::Item > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        std_vector_Sl_CRFSuite_Item_Sg__RemoveAt(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return ; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemSequence_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< CRFSuite::Item > *arg1 = (std::vector< CRFSuite::Item > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< CRFSuite::Item > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        std_vector_Sl_CRFSuite_Item_Sg__RemoveRange(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
      
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return ; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemSequence_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< CRFSuite::Attribute > *arg1 = 0 ;
  int arg2 ;
  std::vector< std::vector< CRFSuite::Attribute > > *result = 0 ;
  
  arg1 = (std::vector< CRFSuite::Attribute > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< CRFSuite::Attribute > const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< std::vector< CRFSuite::Attribute > > *)std_vector_Sl_CRFSuite_Item_Sg__Repeat((std::vector< CRFSuite::Attribute > const &)*arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemSequence_Reverse__SWIG_0(void * jarg1) {
  std::vector< CRFSuite::Item > *arg1 = (std::vector< CRFSuite::Item > *) 0 ;
  
  arg1 = (std::vector< CRFSuite::Item > *)jarg1; 
  {
    try {
      std_vector_Sl_CRFSuite_Item_Sg__Reverse__SWIG_0(arg1);
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return ; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemSequence_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< CRFSuite::Item > *arg1 = (std::vector< CRFSuite::Item > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< CRFSuite::Item > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        std_vector_Sl_CRFSuite_Item_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
      
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return ; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemSequence_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< CRFSuite::Item > *arg1 = (std::vector< CRFSuite::Item > *) 0 ;
  int arg2 ;
  std::vector< std::vector< CRFSuite::Attribute > > *arg3 = 0 ;
  
  arg1 = (std::vector< CRFSuite::Item > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::vector< CRFSuite::Attribute > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::vector< CRFSuite::Attribute > > const & type is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_CRFSuite_Item_Sg__SetRange(arg1,arg2,(std::vector< std::vector< CRFSuite::Attribute > > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return ; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ItemSequence(void * jarg1) {
  std::vector< CRFSuite::Item > *arg1 = (std::vector< CRFSuite::Item > *) 0 ;
  
  arg1 = (std::vector< CRFSuite::Item > *)jarg1; 
  {
    try {
      delete arg1;
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return ; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringList_Clear(void * jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  {
    try {
      (arg1)->clear();
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return ; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringList_Add(void * jarg1, char * jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (arg1)->push_back((std::string const &)*arg2);
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return ; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_StringList_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  {
    try {
      result = ((std::vector< std::string > const *)arg1)->size();
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_StringList_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  {
    try {
      result = ((std::vector< std::string > const *)arg1)->capacity();
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringList_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (std::vector< std::string >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return ; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StringList__SWIG_0() {
  void * jresult ;
  std::vector< std::string > *result = 0 ;
  
  {
    try {
      result = (std::vector< std::string > *)new std::vector< std::string >();
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StringList__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< std::string > *arg1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (std::vector< std::string > *)new std::vector< std::string >((std::vector< std::string > const &)*arg1);
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StringList__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (int)jarg1; 
  {
    try {
      try {
        result = (std::vector< std::string > *)new_std_vector_Sl_std_string_Sg___SWIG_2(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_StringList_getitemcopy(void * jarg1, int jarg2) {
  char * jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::string result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = std_vector_Sl_std_string_Sg__getitemcopy(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_StringList_getitem(void * jarg1, int jarg2) {
  char * jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::string *result = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::string *) &std_vector_Sl_std_string_Sg__getitem(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringList_setitem(void * jarg1, int jarg2, char * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  {
    try {
      try {
        std_vector_Sl_std_string_Sg__setitem(arg1,arg2,(std::string const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return ; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringList_AddRange(void * jarg1, void * jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (std::vector< std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return ;
  } 
  {
    try {
      std_vector_Sl_std_string_Sg__AddRange(arg1,(std::vector< std::string > const &)*arg2);
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return ; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StringList_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        result = (std::vector< std::string > *)std_vector_Sl_std_string_Sg__GetRange(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return 0;
      }
      
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringList_Insert(void * jarg1, int jarg2, char * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  {
    try {
      try {
        std_vector_Sl_std_string_Sg__Insert(arg1,arg2,(std::string const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return ; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringList_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string > *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::string > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_std_string_Sg__InsertRange(arg1,arg2,(std::vector< std::string > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return ; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringList_RemoveAt(void * jarg1, int jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        std_vector_Sl_std_string_Sg__RemoveAt(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return ; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringList_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        std_vector_Sl_std_string_Sg__RemoveRange(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
      
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return ; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StringList_Repeat(char * jarg1, int jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  int arg2 ;
  std::vector< std::string > *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< std::string > *)std_vector_Sl_std_string_Sg__Repeat((std::string const &)*arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringList_Reverse__SWIG_0(void * jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  {
    try {
      std_vector_Sl_std_string_Sg__Reverse__SWIG_0(arg1);
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return ; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringList_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        std_vector_Sl_std_string_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
      
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return ; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringList_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string > *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::string > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_std_string_Sg__SetRange(arg1,arg2,(std::vector< std::string > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return ; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StringList_Contains(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (bool)std_vector_Sl_std_string_Sg__Contains(arg1,(std::string const &)*arg2);
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StringList_IndexOf(void * jarg1, char * jarg2) {
  int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (int)std_vector_Sl_std_string_Sg__IndexOf(arg1,(std::string const &)*arg2);
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StringList_LastIndexOf(void * jarg1, char * jarg2) {
  int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (int)std_vector_Sl_std_string_Sg__LastIndexOf(arg1,(std::string const &)*arg2);
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StringList_Remove(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (bool)std_vector_Sl_std_string_Sg__Remove(arg1,(std::string const &)*arg2);
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_StringList(void * jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  {
    try {
      delete arg1;
    } catch(const std::invalid_argument& e) {
      {
        SWIG_CSharpException(SWIG_IOError, e.what()); return ; 
      };
    } catch(const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


#ifdef __cplusplus
}
#endif

